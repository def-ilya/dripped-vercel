"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.noStateInServerComponents = void 0;
const types_1 = require("@typescript-eslint/types");
const utilities_1 = require("../../utilities");
const BANNED_HOOKS = ['useState', 'useReducer'];
exports.noStateInServerComponents = utilities_1.createRule({
    name: `hydrogen/${__dirname}`,
    meta: {
        type: 'problem',
        docs: {
            description: 'Prevents `useState` and `useReducer` in React Server Components',
            category: 'Possible Errors',
            recommended: 'error',
        },
        messages: {
            noStateInServerComponents: `Do not use {{hook}} in React Server Components. These components only run once and therefore cannot handle state like traditional client components.`,
        },
        schema: [],
    },
    defaultOptions: [],
    create: function (context) {
        return {
            CallExpression(node) {
                if (!utilities_1.isClientComponent(context.getFilename()) &&
                    node.callee.type === types_1.AST_NODE_TYPES.Identifier &&
                    BANNED_HOOKS.includes(node.callee.name)) {
                    context.report({
                        node,
                        data: { hook: node.callee.name },
                        messageId: 'noStateInServerComponents',
                    });
                }
            },
        };
    },
});
