{
  "version": 3,
  "sources": ["../@headlessui/react/dist/_virtual/_rollupPluginBabelHelpers.js", "../@headlessui/react/src/utils/match.ts", "../@headlessui/react/src/utils/render.ts", "../@headlessui/react/src/hooks/use-iso-morphic-effect.ts", "../@headlessui/react/src/hooks/use-server-handoff-complete.ts", "../@headlessui/react/src/internal/portal-force-root.tsx", "../@headlessui/react/src/components/portal/portal.tsx", "../@headlessui/react/src/hooks/use-sync-refs.ts", "../@headlessui/react/src/components/keyboard.ts", "../@headlessui/react/src/utils/bugs.ts", "../@headlessui/react/src/hooks/use-id.ts", "../@headlessui/react/src/hooks/use-window-event.ts", "../@headlessui/react/src/utils/focus-management.ts", "../@headlessui/react/src/hooks/use-is-mounted.ts", "../@headlessui/react/src/hooks/use-focus-trap.ts", "../@headlessui/react/src/hooks/use-inert-others.ts", "../@headlessui/react/src/components/description/description.tsx", "../@headlessui/react/src/internal/open-closed.tsx", "../@headlessui/react/src/internal/stack-context.tsx", "../@headlessui/react/src/components/dialog/dialog.tsx", "../@headlessui/react/src/hooks/use-resolve-button-type.ts", "../@headlessui/react/src/components/disclosure/disclosure.tsx", "../@headlessui/react/src/components/focus-trap/focus-trap.tsx", "../@headlessui/react/src/utils/disposables.ts", "../@headlessui/react/src/hooks/use-disposables.ts", "../@headlessui/react/src/hooks/use-computed.ts", "../@headlessui/react/src/utils/calculate-active-index.ts", "../@headlessui/react/src/components/listbox/listbox.tsx", "../@headlessui/react/src/hooks/use-tree-walker.ts", "../@headlessui/react/src/components/menu/menu.tsx", "../@headlessui/react/src/components/popover/popover.tsx", "../@headlessui/react/src/hooks/use-flags.ts", "../@headlessui/react/src/components/label/label.tsx", "../@headlessui/react/src/components/radio-group/radio-group.tsx", "../@headlessui/react/src/components/switch/switch.tsx", "../@headlessui/react/src/components/tabs/tabs.tsx", "../@headlessui/react/src/hooks/use-is-initial-render.ts", "../@headlessui/react/src/utils/once.ts", "../@headlessui/react/src/components/transitions/utils/transition.ts", "../@headlessui/react/src/components/transitions/transition.tsx"],
  "sourcesContent": ["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nexport { _arrayLikeToArray as arrayLikeToArray, _createForOfIteratorHelperLoose as createForOfIteratorHelperLoose, _extends as extends, _objectWithoutPropertiesLoose as objectWithoutPropertiesLoose, _unsupportedIterableToArray as unsupportedIterableToArray };\n//# sourceMappingURL=_rollupPluginBabelHelpers.js.map\n", "export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n", "import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TSlot>({\n  props,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name,\n}: {\n  props: Expand<Props<TTag, TSlot, any> & PropsForFeatures<TFeature>>\n  slot?: TSlot\n  defaultTag: ElementType\n  features?: TFeature\n  visible?: boolean\n  name: string\n}) {\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, slot, defaultTag, name)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          slot,\n          defaultTag,\n          name\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, slot, defaultTag, name)\n}\n\nfunction _render<TTag extends ElementType, TSlot>(\n  props: Props<TTag, TSlot> & { ref?: unknown },\n  slot: TSlot = {} as TSlot,\n  tag: ElementType,\n  name: string\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(slot) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the slot as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(slot)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (\n        !isValidElement(resolvedChildren) ||\n        (Array.isArray(resolvedChildren) && resolvedChildren.length > 1)\n      ) {\n        throw new Error(\n          [\n            'Passing props on \"Fragment\"!',\n            '',\n            `The current component <${name} /> is rendering a \"Fragment\".`,\n            `However we need to passthrough the following props:`,\n            Object.keys(passThroughProps)\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n            '',\n            'You can apply a few solutions:',\n            [\n              'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n              'Render a single element as the child so that we can forward the props onto that element.',\n            ]\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n          ].join('\\n')\n        )\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n", "import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n", "import { useState, useEffect } from 'react'\n\nlet state = { serverHandoffComplete: false }\n\nexport function useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = useState(state.serverHandoffComplete)\n\n  useEffect(() => {\n    if (serverHandoffComplete === true) return\n\n    setServerHandoffComplete(true)\n  }, [serverHandoffComplete])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return serverHandoffComplete\n}\n", "import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n", "import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  // Ensure the portal root is always in the DOM\n  useEffect(() => {\n    if (target === null) return\n\n    if (!document.body.contains(target)) {\n      document.body.appendChild(target)\n    }\n  }, [target])\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n", "import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType | null> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n", "// TODO: This must already exist somewhere, right? \uD83E\uDD14\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n", "// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n", "import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n", "import { useEffect, useRef } from 'react'\n\nexport function useWindowEvent<TType extends keyof WindowEventMap>(\n  type: TType,\n  listener: (this: Window, ev: WindowEventMap[TType]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  let listenerRef = useRef(listener)\n  listenerRef.current = listener\n\n  useEffect(() => {\n    function handler(event: WindowEventMap[TType]) {\n      listenerRef.current.call(window, event)\n    }\n\n    window.addEventListener(type, handler, options)\n    return () => window.removeEventListener(type, handler, options)\n  }, [type, options])\n}\n", "import { match } from './match'\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nlet focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n  .map(\n    process.env.NODE_ENV === 'test'\n      ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n        // \"hidden\" can be the document.activeElement, because this is not possible\n        // in real browsers.\n        selector => `${selector}:not([tabindex='-1']):not([style*='display: none'])`\n      : selector => `${selector}:not([tabindex='-1'])`\n  )\n  .join(',')\n\nexport enum Focus {\n  /** Focus the first non-disabled element */\n  First = 1 << 0,\n\n  /** Focus the previous non-disabled element */\n  Previous = 1 << 1,\n\n  /** Focus the next non-disabled element */\n  Next = 1 << 2,\n\n  /** Focus the last non-disabled element */\n  Last = 1 << 3,\n\n  /** Wrap tab around */\n  WrapAround = 1 << 4,\n\n  /** Prevent scrolling the focusable elements into view */\n  NoScroll = 1 << 5,\n}\n\nexport enum FocusResult {\n  /** Something went wrong while trying to focus. */\n  Error,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N+1` where `N` is the last index in the array, then we overflow. */\n  Overflow,\n\n  /** Focus was successful. */\n  Success,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N-1` where `N` is the first index in the array, then we underflow. */\n  Underflow,\n}\n\nenum Direction {\n  Previous = -1,\n  Next = 1,\n}\n\nexport function getFocusableElements(container: HTMLElement | null = document.body) {\n  if (container == null) return []\n  return Array.from(container.querySelectorAll<HTMLElement>(focusableSelector))\n}\n\nexport enum FocusableMode {\n  /** The element itself must be focusable. */\n  Strict,\n\n  /** The element should be inside of a focusable element. */\n  Loose,\n}\n\nexport function isFocusableElement(\n  element: HTMLElement,\n  mode: FocusableMode = FocusableMode.Strict\n) {\n  if (element === document.body) return false\n\n  return match(mode, {\n    [FocusableMode.Strict]() {\n      return element.matches(focusableSelector)\n    },\n    [FocusableMode.Loose]() {\n      let next: HTMLElement | null = element\n\n      while (next !== null) {\n        if (next.matches(focusableSelector)) return true\n        next = next.parentElement\n      }\n\n      return false\n    },\n  })\n}\n\nexport function focusElement(element: HTMLElement | null) {\n  element?.focus({ preventScroll: true })\n}\n\nexport function focusIn(container: HTMLElement | HTMLElement[], focus: Focus) {\n  let elements = Array.isArray(container)\n    ? container.slice().sort((a, b) => {\n        let position = a.compareDocumentPosition(b)\n\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) return -1\n        if (position & Node.DOCUMENT_POSITION_PRECEDING) return 1\n        return 0\n      })\n    : getFocusableElements(container)\n  let active = document.activeElement as HTMLElement\n\n  let direction = (() => {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let startIndex = (() => {\n    if (focus & Focus.First) return 0\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1\n    if (focus & Focus.Last) return elements.length - 1\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let focusOptions = focus & Focus.NoScroll ? { preventScroll: true } : {}\n\n  let offset = 0\n  let total = elements.length\n  let next = undefined\n  do {\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error\n\n    let nextIdx = startIndex + offset\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow\n      if (nextIdx >= total) return FocusResult.Overflow\n    }\n\n    next = elements[nextIdx]\n\n    // Try the focus the next element, might not work if it is \"hidden\" to the user.\n    next?.focus(focusOptions)\n\n    // Try the next one in line\n    offset += direction\n  } while (next !== document.activeElement)\n\n  // This is a little weird, but let me try and explain: There are a few scenario's\n  // in chrome for example where a focused `<a>` tag does not get the default focus\n  // styles and sometimes they do. This highly depends on whether you started by\n  // clicking or by using your keyboard. When you programmatically add focus `anchor.focus()`\n  // then the active element (document.activeElement) is this anchor, which is expected.\n  // However in that case the default focus styles are not applied *unless* you\n  // also add this tabindex.\n  if (!next.hasAttribute('tabindex')) next.setAttribute('tabindex', '0')\n\n  return FocusResult.Success\n}\n", "import { useRef, useEffect } from 'react'\n\nexport function useIsMounted() {\n  let mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n", "import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        console.warn('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n", "import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n", "import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet DescriptionContext = createContext<\n  ({ register(value: string): () => void } & SharedData) | null\n>(null)\n\nfunction useDescriptionContext() {\n  let context = useContext(DescriptionContext)\n  if (context === null) {\n    let err = new Error(\n      'You used a <Description /> component, but it is not inside a relevant parent.'\n    )\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext)\n    throw err\n  }\n  return context\n}\n\ninterface DescriptionProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: DescriptionProviderProps) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: DescriptionProviderProps) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let context = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let passThroughProps = props\n  let propsWeControl = { ...context.props, id }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description',\n  })\n}\n", "import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n", "import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n", "// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Handle `Escape` to close\n  useWindowEvent('keydown', event => {\n    if (event.key !== Keys.Escape) return\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    event.preventDefault()\n    event.stopPropagation()\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (event.target !== event.currentTarget) return\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n", "import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n", "// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n  let buttonRef = useSyncRefs(internalButtonRef, ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n", "import {\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nlet DEFAULT_FOCUS_TRAP_TAG = 'div' as const\n\nexport function FocusTrap<TTag extends ElementType = typeof DEFAULT_FOCUS_TRAP_TAG>(\n  props: Props<TTag> & { initialFocus?: MutableRefObject<HTMLElement | null> }\n) {\n  let container = useRef<HTMLElement | null>(null)\n  let { initialFocus, ...passthroughProps } = props\n\n  let ready = useServerHandoffComplete()\n  useFocusTrap(container, ready ? FocusTrapFeatures.All : FocusTrapFeatures.None, { initialFocus })\n\n  let propsWeControl = {\n    ref: container,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    defaultTag: DEFAULT_FOCUS_TRAP_TAG,\n    name: 'FocusTrap',\n  })\n}\n", "export function disposables() {\n  let disposables: Function[] = []\n\n  let api = {\n    requestAnimationFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      let raf = requestAnimationFrame(...args)\n      api.add(() => cancelAnimationFrame(raf))\n    },\n\n    nextFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      api.requestAnimationFrame(() => {\n        api.requestAnimationFrame(...args)\n      })\n    },\n\n    setTimeout(...args: Parameters<typeof setTimeout>) {\n      let timer = setTimeout(...args)\n      api.add(() => clearTimeout(timer))\n    },\n\n    add(cb: () => void) {\n      disposables.push(cb)\n    },\n\n    dispose() {\n      for (let dispose of disposables.splice(0)) {\n        dispose()\n      }\n    },\n  }\n\n  return api\n}\n", "import { useState, useEffect } from 'react'\n\nimport { disposables } from '../utils/disposables'\n\nexport function useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  let [d] = useState(disposables)\n  useEffect(() => () => d.dispose(), [d])\n  return d\n}\n", "import { useState, useRef } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nexport function useComputed<T>(cb: () => T, dependencies: React.DependencyList) {\n  let [value, setValue] = useState(cb)\n  let cbRef = useRef(cb)\n  useIsoMorphicEffect(() => {\n    cbRef.current = cb\n  }, [cb])\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies])\n  return value\n}\n", "function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n", "import React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useId } from '../../hooks/use-id'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useComputed } from '../../hooks/use-computed'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Props } from '../../types'\nimport { Features, forwardRefWithAs, PropsForFeatures, render } from '../../utils/render'\nimport { match } from '../../utils/match'\nimport { disposables } from '../../utils/disposables'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum ListboxStates {\n  Open,\n  Closed,\n}\n\ntype ListboxOptionDataRef = MutableRefObject<{\n  textValue?: string\n  disabled: boolean\n  value: unknown\n}>\n\ninterface StateDefinition {\n  listboxState: ListboxStates\n\n  orientation: 'horizontal' | 'vertical'\n\n  propsRef: MutableRefObject<{ value: unknown; onChange(value: unknown): void }>\n  labelRef: MutableRefObject<HTMLLabelElement | null>\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  optionsRef: MutableRefObject<HTMLUListElement | null>\n\n  disabled: boolean\n  options: { id: string; dataRef: ListboxOptionDataRef }[]\n  searchQuery: string\n  activeOptionIndex: number | null\n}\n\nenum ActionTypes {\n  OpenListbox,\n  CloseListbox,\n\n  SetDisabled,\n  SetOrientation,\n\n  GoToOption,\n  Search,\n  ClearSearch,\n\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseListbox }\n  | { type: ActionTypes.OpenListbox }\n  | { type: ActionTypes.SetDisabled; disabled: boolean }\n  | { type: ActionTypes.SetOrientation; orientation: StateDefinition['orientation'] }\n  | { type: ActionTypes.GoToOption; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToOption; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterOption; id: string; dataRef: ListboxOptionDataRef }\n  | { type: ActionTypes.UnregisterOption; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    return { ...state, activeOptionIndex: null, listboxState: ListboxStates.Closed }\n  },\n  [ActionTypes.OpenListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Open) return state\n    return { ...state, listboxState: ListboxStates.Open }\n  },\n  [ActionTypes.SetDisabled](state, action) {\n    if (state.disabled === action.disabled) return state\n    return { ...state, disabled: action.disabled }\n  },\n  [ActionTypes.SetOrientation](state, action) {\n    if (state.orientation === action.orientation) return state\n    return { ...state, orientation: action.orientation }\n  },\n  [ActionTypes.GoToOption](state, action) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.options,\n      resolveActiveIndex: () => state.activeOptionIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) return state\n    return { ...state, searchQuery: '', activeOptionIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.options.findIndex(\n      option =>\n        !option.dataRef.current.disabled &&\n        option.dataRef.current.textValue?.startsWith(searchQuery)\n    )\n\n    if (match === -1 || match === state.activeOptionIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeOptionIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterOption]: (state, action) => ({\n    ...state,\n    options: [...state.options, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterOption]: (state, action) => {\n    let nextOptions = state.options.slice()\n    let currentActiveOption =\n      state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null\n\n    let idx = nextOptions.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextOptions.splice(idx, 1)\n\n    return {\n      ...state,\n      options: nextOptions,\n      activeOptionIndex: (() => {\n        if (idx === state.activeOptionIndex) return null\n        if (currentActiveOption === null) return null\n\n        // If we removed the option before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextOptions.indexOf(currentActiveOption)\n      })(),\n    }\n  },\n}\n\nlet ListboxContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nListboxContext.displayName = 'ListboxContext'\n\nfunction useListboxContext(component: string) {\n  let context = useContext(ListboxContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Listbox.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_LISTBOX_TAG = Fragment\ninterface ListboxRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\n\nexport function Listbox<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string>(\n  props: Props<TTag, ListboxRenderPropArg, 'value' | 'onChange'> & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n    horizontal?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, horizontal = false, ...passThroughProps } = props\n  const orientation = horizontal ? 'horizontal' : 'vertical'\n\n  let reducerBag = useReducer(stateReducer, {\n    listboxState: ListboxStates.Closed,\n    propsRef: { current: { value, onChange } },\n    labelRef: createRef(),\n    buttonRef: createRef(),\n    optionsRef: createRef(),\n    disabled,\n    orientation,\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null,\n  } as StateDefinition)\n  let [{ listboxState, propsRef, optionsRef, buttonRef }, dispatch] = reducerBag\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = onChange\n  }, [onChange, propsRef])\n  useIsoMorphicEffect(() => dispatch({ type: ActionTypes.SetDisabled, disabled }), [disabled])\n  useIsoMorphicEffect(() => dispatch({ type: ActionTypes.SetOrientation, orientation }), [\n    orientation,\n  ])\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (listboxState !== ListboxStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (optionsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseListbox })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<ListboxRenderPropArg>(\n    () => ({ open: listboxState === ListboxStates.Open, disabled }),\n    [listboxState, disabled]\n  )\n\n  return (\n    <ListboxContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(listboxState, {\n          [ListboxStates.Open]: State.Open,\n          [ListboxStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passThroughProps,\n          slot,\n          defaultTag: DEFAULT_LISTBOX_TAG,\n          name: 'Listbox',\n        })}\n      </OpenClosedProvider>\n    </ListboxContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'aria-labelledby'\n  | 'disabled'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-listbox-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n          })\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n          })\n          break\n      }\n    },\n    [dispatch, state, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (state.listboxState === ListboxStates.Open) {\n        dispatch({ type: ActionTypes.CloseListbox })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        dispatch({ type: ActionTypes.OpenListbox })\n      }\n    },\n    [dispatch, d, state]\n  )\n\n  let labelledby = useComputed(() => {\n    if (!state.labelRef.current) return undefined\n    return [state.labelRef.current.id, id].join(' ')\n  }, [state.labelRef.current, id])\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: useResolveButtonType(props, state.buttonRef),\n    'aria-haspopup': true,\n    'aria-controls': state.optionsRef.current?.id,\n    'aria-expanded': state.disabled ? undefined : state.listboxState === ListboxStates.Open,\n    'aria-labelledby': labelledby,\n    disabled: state.disabled,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Listbox.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype LabelPropsWeControl = 'id' | 'ref' | 'onClick'\n\nfunction Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let [state] = useListboxContext([Listbox.name, Label.name].join('.'))\n  let id = `headlessui-listbox-label-${useId()}`\n\n  let handleClick = useCallback(() => state.buttonRef.current?.focus({ preventScroll: true }), [\n    state.buttonRef,\n  ])\n\n  let slot = useMemo<LabelRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let propsWeControl = { ref: state.labelRef, id, onClick: handleClick }\n  return render({\n    props: { ...props, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: 'Listbox.Label',\n  })\n}\n\n// ---\n\nlet DEFAULT_OPTIONS_TAG = 'ul' as const\ninterface OptionsRenderPropArg {\n  open: boolean\n}\ntype OptionsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'aria-orientation'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet OptionsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Options = forwardRefWithAs(function Options<\n  TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG\n>(\n  props: Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl> &\n    PropsForFeatures<typeof OptionsRenderFeatures>,\n  ref: Ref<HTMLUListElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Options.name].join('.'))\n  let optionsRef = useSyncRefs(state.optionsRef, ref)\n\n  let id = `headlessui-listbox-options-${useId()}`\n  let d = useDisposables()\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.listboxState === ListboxStates.Open\n  })()\n\n  useIsoMorphicEffect(() => {\n    let container = state.optionsRef.current\n    if (!container) return\n    if (state.listboxState !== ListboxStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.listboxState, state.optionsRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLUListElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          if (state.activeOptionIndex !== null) {\n            let { dataRef } = state.options[state.activeOptionIndex]\n            state.propsRef.current.onChange(dataRef.current.value)\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case match(state.orientation, { vertical: Keys.ArrowDown, horizontal: Keys.ArrowRight }):\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Next })\n\n        case match(state.orientation, { vertical: Keys.ArrowUp, horizontal: Keys.ArrowLeft }):\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          return d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [d, dispatch, searchDisposables, state]\n  )\n\n  let labelledby = useComputed(() => state.labelRef.current?.id ?? state.buttonRef.current?.id, [\n    state.labelRef.current,\n    state.buttonRef.current,\n  ])\n\n  let slot = useMemo<OptionsRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeOptionIndex === null ? undefined : state.options[state.activeOptionIndex]?.id,\n    'aria-labelledby': labelledby,\n    'aria-orientation': state.orientation,\n    id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0,\n    ref: optionsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTIONS_TAG,\n    features: OptionsRenderFeatures,\n    visible,\n    name: 'Listbox.Options',\n  })\n})\n\n// ---\n\nlet DEFAULT_OPTION_TAG = 'li' as const\ninterface OptionRenderPropArg {\n  active: boolean\n  selected: boolean\n  disabled: boolean\n}\ntype ListboxOptionPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'aria-selected'\n  | 'onPointerLeave'\n  | 'onMouseLeave'\n  | 'onPointerMove'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in Listbox itself.\n  // But today is not that day..\n  TType = Parameters<typeof Listbox>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, ListboxOptionPropsWeControl | 'value'> & {\n    disabled?: boolean\n    value: TType\n  }\n) {\n  let { disabled = false, value, ...passthroughProps } = props\n  let [state, dispatch] = useListboxContext([Listbox.name, Option.name].join('.'))\n  let id = `headlessui-listbox-option-${useId()}`\n  let active =\n    state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false\n  let selected = state.propsRef.current.value === value\n\n  let bag = useRef<ListboxOptionDataRef['current']>({ disabled, value })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n  useIsoMorphicEffect(() => {\n    bag.current.value = value\n  }, [bag, value])\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  let select = useCallback(() => state.propsRef.current.onChange(value), [state.propsRef, value])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterOption, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterOption, id })\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!selected) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n    document.getElementById(id)?.focus?.()\n  }, [state.listboxState])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.listboxState])\n\n  let handleClick = useCallback(\n    (event: { preventDefault: Function }) => {\n      if (disabled) return event.preventDefault()\n      select()\n      dispatch({ type: ActionTypes.CloseListbox })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n    },\n    [dispatch, state.buttonRef, disabled, select]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<OptionRenderPropArg>(() => ({ active, selected, disabled }), [\n    active,\n    selected,\n    disabled,\n  ])\n  let propsWeControl = {\n    id,\n    role: 'option',\n    tabIndex: disabled === true ? undefined : -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    disabled: undefined, // Never forward the `disabled` prop\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'Listbox.Option',\n  })\n}\n\n// ---\n\nListbox.Button = Button\nListbox.Label = Label\nListbox.Options = Options\nListbox.Option = Option\n", "import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n", "// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\nimport React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { disposables } from '../../utils/disposables'\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum MenuStates {\n  Open,\n  Closed,\n}\n\ntype MenuItemDataRef = MutableRefObject<{ textValue?: string; disabled: boolean }>\n\ninterface StateDefinition {\n  menuState: MenuStates\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  itemsRef: MutableRefObject<HTMLDivElement | null>\n  items: { id: string; dataRef: MenuItemDataRef }[]\n  searchQuery: string\n  activeItemIndex: number | null\n}\n\nenum ActionTypes {\n  OpenMenu,\n  CloseMenu,\n\n  GoToItem,\n  Search,\n  ClearSearch,\n  RegisterItem,\n  UnregisterItem,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseMenu }\n  | { type: ActionTypes.OpenMenu }\n  | { type: ActionTypes.GoToItem; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToItem; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterItem; id: string; dataRef: MenuItemDataRef }\n  | { type: ActionTypes.UnregisterItem; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseMenu](state) {\n    if (state.menuState === MenuStates.Closed) return state\n    return { ...state, activeItemIndex: null, menuState: MenuStates.Closed }\n  },\n  [ActionTypes.OpenMenu](state) {\n    if (state.menuState === MenuStates.Open) return state\n    return { ...state, menuState: MenuStates.Open }\n  },\n  [ActionTypes.GoToItem]: (state, action) => {\n    let activeItemIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.items,\n      resolveActiveIndex: () => state.activeItemIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) return state\n    return { ...state, searchQuery: '', activeItemIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.items.findIndex(\n      item =>\n        item.dataRef.current.textValue?.startsWith(searchQuery) && !item.dataRef.current.disabled\n    )\n\n    if (match === -1 || match === state.activeItemIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeItemIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterItem]: (state, action) => ({\n    ...state,\n    items: [...state.items, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterItem]: (state, action) => {\n    let nextItems = state.items.slice()\n    let currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null\n\n    let idx = nextItems.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextItems.splice(idx, 1)\n\n    return {\n      ...state,\n      items: nextItems,\n      activeItemIndex: (() => {\n        if (idx === state.activeItemIndex) return null\n        if (currentActiveItem === null) return null\n\n        // If we removed the item before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextItems.indexOf(currentActiveItem)\n      })(),\n    }\n  },\n}\n\nlet MenuContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nMenuContext.displayName = 'MenuContext'\n\nfunction useMenuContext(component: string) {\n  let context = useContext(MenuContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Menu.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useMenuContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_MENU_TAG = Fragment\ninterface MenuRenderPropArg {\n  open: boolean\n}\n\nexport function Menu<TTag extends ElementType = typeof DEFAULT_MENU_TAG>(\n  props: Props<TTag, MenuRenderPropArg>\n) {\n  let reducerBag = useReducer(stateReducer, {\n    menuState: MenuStates.Closed,\n    buttonRef: createRef(),\n    itemsRef: createRef(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null,\n  } as StateDefinition)\n  let [{ menuState, itemsRef, buttonRef }, dispatch] = reducerBag\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (menuState !== MenuStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (itemsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseMenu })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<MenuRenderPropArg>(() => ({ open: menuState === MenuStates.Open }), [\n    menuState,\n  ])\n\n  return (\n    <MenuContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(menuState, {\n          [MenuStates.Open]: State.Open,\n          [MenuStates.Closed]: State.Closed,\n        })}\n      >\n        {render({ props, slot, defaultTag: DEFAULT_MENU_TAG, name: 'Menu' })}\n      </OpenClosedProvider>\n    </MenuContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-menu-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.First }))\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last }))\n          break\n      }\n    },\n    [dispatch, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (props.disabled) return\n      if (state.menuState === MenuStates.Open) {\n        dispatch({ type: ActionTypes.CloseMenu })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        event.stopPropagation()\n        dispatch({ type: ActionTypes.OpenMenu })\n      }\n    },\n    [dispatch, d, state, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: useResolveButtonType(props, state.buttonRef),\n    'aria-haspopup': true,\n    'aria-controls': state.itemsRef.current?.id,\n    'aria-expanded': props.disabled ? undefined : state.menuState === MenuStates.Open,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Menu.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEMS_TAG = 'div' as const\ninterface ItemsRenderPropArg {\n  open: boolean\n}\ntype ItemsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet ItemsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Items = forwardRefWithAs(function Items<TTag extends ElementType = typeof DEFAULT_ITEMS_TAG>(\n  props: Props<TTag, ItemsRenderPropArg, ItemsPropsWeControl> &\n    PropsForFeatures<typeof ItemsRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Items.name].join('.'))\n  let itemsRef = useSyncRefs(state.itemsRef, ref)\n\n  let id = `headlessui-menu-items-${useId()}`\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.menuState === MenuStates.Open\n  })()\n\n  useEffect(() => {\n    let container = state.itemsRef.current\n    if (!container) return\n    if (state.menuState !== MenuStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.menuState, state.itemsRef])\n\n  useTreeWalker({\n    container: state.itemsRef.current,\n    enabled: state.menuState === MenuStates.Open,\n    accept(node) {\n      if (node.getAttribute('role') === 'menuitem') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLDivElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          if (state.activeItemIndex !== null) {\n            let { id } = state.items[state.activeItemIndex]\n            document.getElementById(id)?.click()\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [dispatch, searchDisposables, state]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let slot = useMemo<ItemsRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeItemIndex === null ? undefined : state.items[state.activeItemIndex]?.id,\n    'aria-labelledby': state.buttonRef.current?.id,\n    id,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role: 'menu',\n    tabIndex: 0,\n    ref: itemsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEMS_TAG,\n    features: ItemsRenderFeatures,\n    visible,\n    name: 'Menu.Items',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEM_TAG = Fragment\ninterface ItemRenderPropArg {\n  active: boolean\n  disabled: boolean\n}\ntype MenuItemPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'onPointerLeave'\n  | 'onPointerMove'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Item<TTag extends ElementType = typeof DEFAULT_ITEM_TAG>(\n  props: Props<TTag, ItemRenderPropArg, MenuItemPropsWeControl> & {\n    disabled?: boolean\n    onClick?: (event: { preventDefault: Function }) => void\n  }\n) {\n  let { disabled = false, onClick, ...passthroughProps } = props\n  let [state, dispatch] = useMenuContext([Menu.name, Item.name].join('.'))\n  let id = `headlessui-menu-item-${useId()}`\n  let active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false\n\n  useIsoMorphicEffect(() => {\n    if (state.menuState !== MenuStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.menuState])\n\n  let bag = useRef<MenuItemDataRef['current']>({ disabled })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterItem, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterItem, id })\n  }, [bag, id])\n\n  let handleClick = useCallback(\n    (event: MouseEvent) => {\n      if (disabled) return event.preventDefault()\n      dispatch({ type: ActionTypes.CloseMenu })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      if (onClick) return onClick(event)\n    },\n    [dispatch, state.buttonRef, disabled, onClick]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<ItemRenderPropArg>(() => ({ active, disabled }), [active, disabled])\n  let propsWeControl = {\n    id,\n    role: 'menuitem',\n    tabIndex: disabled === true ? undefined : -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    disabled: undefined, // Never forward the `disabled` prop\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEM_TAG,\n    name: 'Menu.Item',\n  })\n}\n\n// ---\n\nMenu.Button = Button\nMenu.Items = Items\nMenu.Item = Item\n", "import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nPopoverAPIContext.displayName = 'PopoverAPIContext'\n\nfunction usePopoverAPIContext(component: string) {\n  let context = useContext(PopoverAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return button\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return button\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, button]\n  )\n\n  let api = useMemo<ContextType<typeof PopoverAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open, close }),\n    [popoverState, close]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <PopoverAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(popoverState, {\n            [PopoverStates.Open]: State.Open,\n            [PopoverStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props,\n            slot,\n            defaultTag: DEFAULT_POPOVER_TAG,\n            name: 'Popover',\n          })}\n        </OpenClosedProvider>\n      </PopoverAPIContext.Provider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n  let withinPanelButtonRef = useSyncRefs(internalButtonRef, ref)\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        ref: withinPanelButtonRef,\n        type,\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & {\n      focus?: boolean\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let { close } = usePopoverAPIContext([Popover.name, Panel.name].join('.'))\n\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (props.static) return\n\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, props.static, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n", "import { useState, useCallback } from 'react'\n\nexport function useFlags(initialFlags = 0) {\n  let [flags, setFlags] = useState(initialFlags)\n\n  let addFlag = useCallback((flag: number) => setFlags(flags => flags | flag), [setFlags])\n  let hasFlag = useCallback((flag: number) => Boolean(flags & flag), [flags])\n  let removeFlag = useCallback((flag: number) => setFlags(flags => flags & ~flag), [setFlags])\n  let toggleFlag = useCallback((flag: number) => setFlags(flags => flags ^ flag), [setFlags])\n\n  return { addFlag, hasFlag, removeFlag, toggleFlag }\n}\n", "import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet LabelContext = createContext<({ register(value: string): () => void } & SharedData) | null>(\n  null\n)\n\nfunction useLabelContext() {\n  let context = useContext(LabelContext)\n  if (context === null) {\n    let err = new Error('You used a <Label /> component, but it is not inside a relevant parent.')\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext)\n    throw err\n  }\n  return context\n}\n\ninterface LabelProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useLabels(): [string | undefined, (props: LabelProviderProps) => JSX.Element] {\n  let [labelIds, setLabelIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined.\n    labelIds.length > 0 ? labelIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function LabelProvider(props: LabelProviderProps) {\n        let register = useCallback((value: string) => {\n          setLabelIds(existing => [...existing, value])\n\n          return () =>\n            setLabelIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return <LabelContext.Provider value={contextBag}>{props.children}</LabelContext.Provider>\n      }\n    }, [setLabelIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id'\n\nexport function Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl> & {\n    passive?: boolean\n  }\n) {\n  let { passive = false, ...passThroughProps } = props\n  let context = useLabelContext()\n  let id = `headlessui-label-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let propsWeControl = { ...context.props, id }\n\n  let allProps = { ...passThroughProps, ...propsWeControl }\n  // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n  if (passive) delete allProps['onClick']\n\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: context.name || 'Label',\n  })\n}\n", "import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n", "import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  useRef,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { Label, useLabels } from '../label/label'\nimport { Description, useDescriptions } from '../description/description'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\n\ninterface StateDefinition {\n  switch: HTMLButtonElement | null\n  setSwitch(element: HTMLButtonElement): void\n  labelledby: string | undefined\n  describedby: string | undefined\n}\n\nlet GroupContext = createContext<StateDefinition | null>(null)\nGroupContext.displayName = 'GroupContext'\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: Props<TTag>) {\n  let [switchElement, setSwitchElement] = useState<HTMLButtonElement | null>(null)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let context = useMemo<StateDefinition>(\n    () => ({ switch: switchElement, setSwitch: setSwitchElement, labelledby, describedby }),\n    [switchElement, setSwitchElement, labelledby, describedby]\n  )\n\n  return (\n    <DescriptionProvider name=\"Switch.Description\">\n      <LabelProvider\n        name=\"Switch.Label\"\n        props={{\n          onClick() {\n            if (!switchElement) return\n            switchElement.click()\n            switchElement.focus({ preventScroll: true })\n          },\n        }}\n      >\n        <GroupContext.Provider value={context}>\n          {render({ props, defaultTag: DEFAULT_GROUP_TAG, name: 'Switch.Group' })}\n        </GroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nlet DEFAULT_SWITCH_TAG = 'button' as const\ninterface SwitchRenderPropArg {\n  checked: boolean\n}\ntype SwitchPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-checked'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onClick'\n  | 'onKeyUp'\n  | 'onKeyPress'\n\nexport function Switch<TTag extends ElementType = typeof DEFAULT_SWITCH_TAG>(\n  props: Props<TTag, SwitchRenderPropArg, SwitchPropsWeControl | 'checked' | 'onChange'> & {\n    checked: boolean\n    onChange(checked: boolean): void\n  }\n) {\n  let { checked, onChange, ...passThroughProps } = props\n  let id = `headlessui-switch-${useId()}`\n  let groupContext = useContext(GroupContext)\n  let internalSwitchRef = useRef<HTMLButtonElement | null>(null)\n  let switchRef = useSyncRefs(\n    internalSwitchRef,\n    groupContext === null ? null : groupContext.setSwitch\n  )\n\n  let toggle = useCallback(() => onChange(!checked), [onChange, checked])\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      toggle()\n    },\n    [toggle]\n  )\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      if (event.key !== Keys.Tab) event.preventDefault()\n      if (event.key === Keys.Space) toggle()\n    },\n    [toggle]\n  )\n\n  // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n  let handleKeyPress = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => event.preventDefault(),\n    []\n  )\n\n  let slot = useMemo<SwitchRenderPropArg>(() => ({ checked }), [checked])\n  let propsWeControl = {\n    id,\n    ref: switchRef,\n    role: 'switch',\n    type: useResolveButtonType(props, internalSwitchRef),\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext?.labelledby,\n    'aria-describedby': groupContext?.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress,\n  }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch',\n  })\n}\n\n// ---\n\nSwitch.Group = Group\nSwitch.Label = Label\nSwitch.Description = Description\n", "import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  useEffect,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  Dispatch,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render, Features, PropsForFeatures } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus } from '../../utils/focus-management'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\ninterface StateDefinition {\n  selectedIndex: number | null\n\n  orientation: 'horizontal' | 'vertical'\n  activation: 'auto' | 'manual'\n\n  tabs: MutableRefObject<HTMLElement | null>[]\n  panels: MutableRefObject<HTMLElement | null>[]\n}\n\nenum ActionTypes {\n  SetSelectedIndex,\n  SetOrientation,\n  SetActivation,\n\n  RegisterTab,\n  UnregisterTab,\n\n  RegisterPanel,\n  UnregisterPanel,\n\n  ForceRerender,\n}\n\ntype Actions =\n  | { type: ActionTypes.SetSelectedIndex; index: number }\n  | { type: ActionTypes.SetOrientation; orientation: StateDefinition['orientation'] }\n  | { type: ActionTypes.SetActivation; activation: StateDefinition['activation'] }\n  | { type: ActionTypes.RegisterTab; tab: MutableRefObject<HTMLElement | null> }\n  | { type: ActionTypes.UnregisterTab; tab: MutableRefObject<HTMLElement | null> }\n  | { type: ActionTypes.RegisterPanel; panel: MutableRefObject<HTMLElement | null> }\n  | { type: ActionTypes.UnregisterPanel; panel: MutableRefObject<HTMLElement | null> }\n  | { type: ActionTypes.ForceRerender }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetSelectedIndex](state, action) {\n    if (state.selectedIndex === action.index) return state\n    return { ...state, selectedIndex: action.index }\n  },\n  [ActionTypes.SetOrientation](state, action) {\n    if (state.orientation === action.orientation) return state\n    return { ...state, orientation: action.orientation }\n  },\n  [ActionTypes.SetActivation](state, action) {\n    if (state.activation === action.activation) return state\n    return { ...state, activation: action.activation }\n  },\n  [ActionTypes.RegisterTab](state, action) {\n    if (state.tabs.includes(action.tab)) return state\n    return { ...state, tabs: [...state.tabs, action.tab] }\n  },\n  [ActionTypes.UnregisterTab](state, action) {\n    return { ...state, tabs: state.tabs.filter(tab => tab !== action.tab) }\n  },\n  [ActionTypes.RegisterPanel](state, action) {\n    if (state.panels.includes(action.panel)) return state\n    return { ...state, panels: [...state.panels, action.panel] }\n  },\n  [ActionTypes.UnregisterPanel](state, action) {\n    return { ...state, panels: state.panels.filter(panel => panel !== action.panel) }\n  },\n  [ActionTypes.ForceRerender](state) {\n    return { ...state }\n  },\n}\n\nlet TabsContext = createContext<\n  [StateDefinition, { change(index: number): void; dispatch: Dispatch<Actions> }] | null\n>(null)\nTabsContext.displayName = 'TabsContext'\n\nfunction useTabsContext(component: string) {\n  let context = useContext(TabsContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Tab.Group /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useTabsContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_TABS_TAG = Fragment\ninterface TabsRenderPropArg {\n  selectedIndex: number\n}\n\nfunction Tabs<TTag extends ElementType = typeof DEFAULT_TABS_TAG>(\n  props: Props<TTag, TabsRenderPropArg> & {\n    defaultIndex?: number\n    onChange?: (index: number) => void\n    selectedIndex?: number\n    vertical?: boolean\n    manual?: boolean\n  }\n) {\n  let {\n    defaultIndex = 0,\n    vertical = false,\n    manual = false,\n    onChange,\n    selectedIndex = null,\n    ...passThroughProps\n  } = props\n  const orientation = vertical ? 'vertical' : 'horizontal'\n  const activation = manual ? 'manual' : 'auto'\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    selectedIndex: null,\n    tabs: [],\n    panels: [],\n    orientation,\n    activation,\n  } as StateDefinition)\n  let slot = useMemo(() => ({ selectedIndex: state.selectedIndex }), [state.selectedIndex])\n  let onChangeRef = useRef<(index: number) => void>(() => {})\n\n  useEffect(() => {\n    dispatch({ type: ActionTypes.SetOrientation, orientation })\n  }, [orientation])\n\n  useEffect(() => {\n    dispatch({ type: ActionTypes.SetActivation, activation })\n  }, [activation])\n\n  useEffect(() => {\n    if (typeof onChange === 'function') {\n      onChangeRef.current = onChange\n    }\n  }, [onChange])\n\n  useEffect(() => {\n    if (state.tabs.length <= 0) return\n    if (selectedIndex === null && state.selectedIndex !== null) return\n\n    let tabs = state.tabs.map(tab => tab.current).filter(Boolean) as HTMLElement[]\n    let focusableTabs = tabs.filter(tab => !tab.hasAttribute('disabled'))\n\n    let indexToSet = selectedIndex ?? defaultIndex\n\n    // Underflow\n    if (indexToSet < 0) {\n      dispatch({ type: ActionTypes.SetSelectedIndex, index: tabs.indexOf(focusableTabs[0]) })\n    }\n\n    // Overflow\n    else if (indexToSet > state.tabs.length) {\n      dispatch({\n        type: ActionTypes.SetSelectedIndex,\n        index: tabs.indexOf(focusableTabs[focusableTabs.length - 1]),\n      })\n    }\n\n    // Middle\n    else {\n      let before = tabs.slice(0, indexToSet)\n      let after = tabs.slice(indexToSet)\n\n      let next = [...after, ...before].find(tab => focusableTabs.includes(tab))\n      if (!next) return\n\n      dispatch({ type: ActionTypes.SetSelectedIndex, index: tabs.indexOf(next) })\n    }\n  }, [defaultIndex, selectedIndex, state.tabs, state.selectedIndex])\n\n  let lastChangedIndex = useRef(state.selectedIndex)\n  let providerBag = useMemo<ContextType<typeof TabsContext>>(\n    () => [\n      state,\n      {\n        dispatch,\n        change(index: number) {\n          if (lastChangedIndex.current !== index) onChangeRef.current(index)\n          lastChangedIndex.current = index\n\n          dispatch({ type: ActionTypes.SetSelectedIndex, index })\n        },\n      },\n    ],\n    [state, dispatch]\n  )\n\n  return (\n    <TabsContext.Provider value={providerBag}>\n      {render({\n        props: { ...passThroughProps },\n        slot,\n        defaultTag: DEFAULT_TABS_TAG,\n        name: 'Tabs',\n      })}\n    </TabsContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_LIST_TAG = 'div' as const\ninterface ListRenderPropArg {\n  selectedIndex: number\n}\ntype ListPropsWeControl = 'role' | 'aria-orientation'\n\nfunction List<TTag extends ElementType = typeof DEFAULT_LIST_TAG>(\n  props: Props<TTag, ListRenderPropArg, ListPropsWeControl> & {}\n) {\n  let [{ selectedIndex, orientation }] = useTabsContext([Tab.name, List.name].join('.'))\n\n  let slot = { selectedIndex }\n  let propsWeControl = {\n    role: 'tablist',\n    'aria-orientation': orientation,\n  }\n  let passThroughProps = props\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_LIST_TAG,\n    name: 'Tabs.List',\n  })\n}\n\n// ---\n\nlet DEFAULT_TAB_TAG = 'button' as const\ninterface TabRenderPropArg {\n  selected: boolean\n}\ntype TabPropsWeControl = 'id' | 'role' | 'type' | 'aria-controls' | 'aria-selected' | 'tabIndex'\n\nexport function Tab<TTag extends ElementType = typeof DEFAULT_TAB_TAG>(\n  props: Props<TTag, TabRenderPropArg, TabPropsWeControl>\n) {\n  let id = `headlessui-tabs-tab-${useId()}`\n\n  let [\n    { selectedIndex, tabs, panels, orientation, activation },\n    { dispatch, change },\n  ] = useTabsContext(Tab.name)\n\n  let internalTabRef = useRef<HTMLElement>(null)\n  let tabRef = useSyncRefs(internalTabRef, element => {\n    if (!element) return\n    dispatch({ type: ActionTypes.ForceRerender })\n  })\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterTab, tab: internalTabRef })\n    return () => dispatch({ type: ActionTypes.UnregisterTab, tab: internalTabRef })\n  }, [dispatch, internalTabRef])\n\n  let myIndex = tabs.indexOf(internalTabRef)\n  let selected = myIndex === selectedIndex\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      let list = tabs.map(tab => tab.current).filter(Boolean) as HTMLElement[]\n\n      if (event.key === Keys.Space || event.key === Keys.Enter) {\n        event.preventDefault()\n        event.stopPropagation()\n\n        change(myIndex)\n        return\n      }\n\n      switch (event.key) {\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n\n          return focusIn(list, Focus.First)\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n\n          return focusIn(list, Focus.Last)\n      }\n\n      return match(orientation, {\n        vertical() {\n          if (event.key === Keys.ArrowUp) return focusIn(list, Focus.Previous | Focus.WrapAround)\n          if (event.key === Keys.ArrowDown) return focusIn(list, Focus.Next | Focus.WrapAround)\n          return\n        },\n        horizontal() {\n          if (event.key === Keys.ArrowLeft) return focusIn(list, Focus.Previous | Focus.WrapAround)\n          if (event.key === Keys.ArrowRight) return focusIn(list, Focus.Next | Focus.WrapAround)\n          return\n        },\n      })\n    },\n    [tabs, orientation, myIndex, change]\n  )\n\n  let handleFocus = useCallback(() => {\n    internalTabRef.current?.focus()\n  }, [internalTabRef])\n\n  let handleSelection = useCallback(() => {\n    internalTabRef.current?.focus()\n    change(myIndex)\n  }, [change, myIndex, internalTabRef])\n\n  let slot = useMemo(() => ({ selected }), [selected])\n  let propsWeControl = {\n    ref: tabRef,\n    onKeyDown: handleKeyDown,\n    onFocus: activation === 'manual' ? handleFocus : handleSelection,\n    onClick: handleSelection,\n    id,\n    role: 'tab',\n    type: useResolveButtonType(props, internalTabRef),\n    'aria-controls': panels[myIndex]?.current?.id,\n    'aria-selected': selected,\n    tabIndex: selected ? 0 : -1,\n  }\n  let passThroughProps = props\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TAB_TAG,\n    name: 'Tabs.Tab',\n  })\n}\n\n// ---\n\nlet DEFAULT_PANELS_TAG = 'div' as const\ninterface PanelsRenderPropArg {\n  selectedIndex: number\n}\n\nfunction Panels<TTag extends ElementType = typeof DEFAULT_PANELS_TAG>(\n  props: Props<TTag, PanelsRenderPropArg>\n) {\n  let [{ selectedIndex }] = useTabsContext([Tab.name, Panels.name].join('.'))\n\n  let slot = useMemo(() => ({ selectedIndex }), [selectedIndex])\n\n  return render({\n    props,\n    slot,\n    defaultTag: DEFAULT_PANELS_TAG,\n    name: 'Tabs.Panels',\n  })\n}\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  selected: boolean\n}\ntype PanelPropsWeControl = 'id' | 'role' | 'aria-labelledby' | 'tabIndex'\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nfunction Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>\n) {\n  let [{ selectedIndex, tabs, panels }, { dispatch }] = useTabsContext(\n    [Tab.name, Panel.name].join('.')\n  )\n\n  let id = `headlessui-tabs-panel-${useId()}`\n  let internalPanelRef = useRef<HTMLElement>(null)\n  let panelRef = useSyncRefs(internalPanelRef, element => {\n    if (!element) return\n    dispatch({ type: ActionTypes.ForceRerender })\n  })\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterPanel, panel: internalPanelRef })\n    return () => dispatch({ type: ActionTypes.UnregisterPanel, panel: internalPanelRef })\n  }, [dispatch, internalPanelRef])\n\n  let myIndex = panels.indexOf(internalPanelRef)\n  let selected = myIndex === selectedIndex\n\n  let slot = useMemo(() => ({ selected }), [selected])\n  let propsWeControl = {\n    ref: panelRef,\n    id,\n    role: 'tabpanel',\n    'aria-labelledby': tabs[myIndex]?.current?.id,\n    tabIndex: selected ? 0 : -1,\n  }\n\n  let passThroughProps = props\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: selected,\n    name: 'Tabs.Panel',\n  })\n}\n\n// ---\n\nTab.Group = Tabs\nTab.List = List\nTab.Panels = Panels\nTab.Panel = Panel\n", "import { useRef, useEffect } from 'react'\n\nexport function useIsInitialRender() {\n  let initial = useRef(true)\n\n  useEffect(() => {\n    initial.current = false\n  }, [])\n\n  return initial.current\n}\n", "export function once<T>(cb: (...args: T[]) => void) {\n  let state = { called: false }\n\n  return (...args: T[]) => {\n    if (state.called) return\n    state.called = true\n    return cb(...args)\n  }\n}\n", "import { once } from '../../../utils/once'\nimport { disposables } from '../../../utils/disposables'\n\nfunction addClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.add(...classes)\n}\n\nfunction removeClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.remove(...classes)\n}\n\nexport enum Reason {\n  Finished = 'finished',\n  Cancelled = 'cancelled',\n}\n\nfunction waitForTransition(node: HTMLElement, done: (reason: Reason) => void) {\n  let d = disposables()\n\n  if (!node) return d.dispose\n\n  // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n  let { transitionDuration, transitionDelay } = getComputedStyle(node)\n\n  let [durationMs, delaysMs] = [transitionDuration, transitionDelay].map(value => {\n    let [resolvedValue = 0] = value\n      .split(',')\n      // Remove falsy we can't work with\n      .filter(Boolean)\n      // Values are returned as `0.3s` or `75ms`\n      .map(v => (v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000))\n      .sort((a, z) => z - a)\n\n    return resolvedValue\n  })\n\n  // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n  if (durationMs !== 0) {\n    d.setTimeout(() => {\n      done(Reason.Finished)\n    }, durationMs + delaysMs)\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished)\n  }\n\n  // If we get disposed before the timeout runs we should cleanup anyway\n  d.add(() => done(Reason.Cancelled))\n\n  return d.dispose\n}\n\nexport function transition(\n  node: HTMLElement,\n  base: string[],\n  from: string[],\n  to: string[],\n  entered: string[],\n  done?: (reason: Reason) => void\n) {\n  let d = disposables()\n  let _done = done !== undefined ? once(done) : () => {}\n\n  removeClasses(node, ...entered)\n  addClasses(node, ...base, ...from)\n\n  d.nextFrame(() => {\n    removeClasses(node, ...from)\n    addClasses(node, ...to)\n\n    d.add(\n      waitForTransition(node, reason => {\n        removeClasses(node, ...to, ...base)\n        addClasses(node, ...entered)\n        return _done(reason)\n      })\n    )\n  })\n\n  // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n  d.add(() => removeClasses(node, ...base, ...from, ...to, ...entered))\n\n  // When we get disposed early, than we should also call the done method but switch the reason.\n  d.add(() => _done(Reason.Cancelled))\n\n  return d.dispose\n}\n", "import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n  initial: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  entered?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    entered,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear, initial } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let enteredClasses = useSplitClasses(entered)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  let ready = useServerHandoffComplete()\n\n  useEffect(() => {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state, ready])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      <OpenClosedProvider\n        value={match(state, {\n          [TreeStates.Visible]: State.Open,\n          [TreeStates.Hidden]: State.Closed,\n        })}\n      >\n        {render({\n          props: { ...passthroughProps, ...propsWeControl },\n          defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition.Child',\n        })}\n      </OpenClosedProvider>\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show?: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  let usesOpenClosedState = useOpenClosed()\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  if (![true, false].includes((show as unknown) as boolean)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show: show as boolean, appear: appear || !initial, initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render({\n          props: {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          defaultTag: Fragment,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition',\n        })}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = function Child<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let hasTransitionContext = useContext(TransitionContext) !== null\n  let hasOpenClosedContext = useOpenClosed() !== null\n\n  return !hasTransitionContext && hasOpenClosedContext ? (\n    <Transition {...props} />\n  ) : (\n    <TransitionChild {...props} />\n  )\n}\nTransition.Root = Transition\n"],
  "mappings": "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",
  "names": []
}
